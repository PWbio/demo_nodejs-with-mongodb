{"version":3,"sources":["components/Header.module.scss","axiosMethod.js","hook/Message.jsx","components/AddingBox.jsx","components/Header.jsx","components/MuiTable.jsx","App.js","index.js","components/AddingBox.module.scss","components/MuiTable.module.scss"],"names":["module","exports","host","get","a","axios","post","data","deleteOne","id","delete","deleteAll","put","usePrompt","useState","open","status","message","alert","setAlert","handleClose","event","reason","Notification","useCallback","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","sx","width","metadata","field","label","AddingBox","setRefresh","name","address","contact","phone","fields","setFields","handleSubmit","e","preventDefault","prev","spawnData","faker","company","companyName","streetAddress","cityName","zipCode","country","findName","phoneNumber","newTenData","Array","keys","map","i","className","S","box","autoComplete","onSubmit","v","TextField","variant","value","onChange","target","required","fullWidth","textField","margin","size","Button","onClick","endIcon","type","Header","columns","headerName","EditableCell","rowData","colName","editMode","TableCell","Tooltip","title","placement","arrow","cell","MuiTable","refresh","rows","setRows","rowSnapshot","setRowSnapshot","getData","simulateError","Error","api","parseData","_id","console","log","deleteData","index","copyRows","splice","deleteAllData","toggleEditMode","state","prevRows","row","closeEditor","publish","handleCellChange","newValue","newRowData","useEffect","buttons","color","TableContainer","component","Paper","Table","TableHead","TableRow","col","TableBody","rowIdx","border","prevShot","openEditor","App","style","Divider","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.1db07c1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3v0KW\"};","import axios from \"axios\";\n\nconst host = \"http://localhost:8080\";\nexport const get = async () => await axios.get(`${host}/get`);\n\nexport const post = async (data) => await axios.post(`${host}/post`, data);\n\nexport const deleteOne = async (id) =>\n  await axios.delete(`${host}/delete`, { data: { id } });\n\nexport const deleteAll = async () => await axios.delete(`${host}/delete_all`);\n\nexport const put = async (data) => await axios.put(`${host}/put`, data);\n","import React, { useState, useCallback } from \"react\";\nimport { Alert, Snackbar } from \"@mui/material\";\n\nconst usePrompt = () => {\n  const [alert, setAlert] = useState({\n    open: false,\n    status: \"success\",\n    message: \"\",\n  });\n\n  const { open, status, message } = alert;\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") return; // prevent from closing when user click somewhere else in the window.\n    setAlert({ ...alert, open: false });\n  };\n\n  // use callback to prevent unnecessary rendering\n  const Notification = useCallback(\n    () => (\n      <>\n        {open && (\n          <Snackbar\n            open={open}\n            autoHideDuration={3500}\n            onClose={handleClose}\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n          >\n            <Alert\n              onClose={handleClose}\n              severity={status}\n              sx={{ width: \"100%\" }}\n            >\n              {message}\n            </Alert>\n          </Snackbar>\n        )}\n      </>\n    ),\n    [open, status, message]\n  );\n\n  return { Notification, setAlert };\n};\n\nexport default usePrompt;\n","import React, { useState } from \"react\";\nimport S from \"./AddingBox.module.scss\";\nimport { Button, TextField } from \"@mui/material\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport { post } from \"../axiosMethod\";\nimport faker from \"faker\";\nimport usePrompt from \"../hook/Message\";\n\nconst metadata = [\n  {\n    field: \"name\",\n    label: \"Company Name\",\n  },\n  {\n    field: \"address\",\n    label: \"Address\",\n  },\n  {\n    field: \"contact\",\n    label: \"Contact\",\n  },\n  {\n    field: \"phone\",\n    label: \"Phone Number\",\n  },\n];\n\nconst AddingBox = ({ setRefresh }) => {\n  const { Notification, setAlert } = usePrompt();\n\n  const [fields, setFields] = useState({\n    name: \"\",\n    address: \"\",\n    contact: \"\",\n    phone: \"\",\n  });\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await post(fields);\n      setAlert({\n        open: true,\n        status: \"success\",\n        message: \"Succesfully post 1 entry to database.\",\n      });\n      setRefresh((prev) => !prev);\n    } catch (e) {\n      setAlert({\n        open: true,\n        status: \"error\",\n        message: `Failed to post data to database. (${e.message})`,\n      });\n    }\n  };\n\n  const spawnData = () => {\n    return {\n      name: faker.company.companyName(),\n      address: `${faker.address.streetAddress()}, ${faker.address.cityName()} ${faker.address.zipCode()}, ${faker.address.country()}`,\n      contact: faker.name.findName(),\n      phone: faker.phone.phoneNumber(),\n    };\n  };\n\n  const newOneData = () => {\n    setFields(spawnData());\n  };\n\n  const newTenData = async () => {\n    const data = [...Array(10).keys()].map((i) => spawnData());\n    try {\n      await post(data);\n      setAlert({\n        open: true,\n        status: \"success\",\n        message: \"Succesfully post 10 entries to database.\",\n      });\n      setRefresh((prev) => !prev);\n    } catch (e) {\n      setAlert({\n        open: true,\n        status: \"error\",\n        message: `Failed to post data to database. (${e.message})`,\n      });\n    }\n  };\n\n  return (\n    <>\n      <Notification />\n      <div className={S.box}>\n        <h1>Create New Company Info </h1>\n\n        <form\n          // noValidate\n          autoComplete=\"off\"\n          onSubmit={handleSubmit}\n        >\n          {metadata.map((v) => {\n            return (\n              <TextField\n                key={v.field}\n                id={v.field}\n                label={v.label}\n                variant=\"outlined\"\n                value={fields[v.field]}\n                onChange={(e) => {\n                  setFields({ ...fields, [v.field]: e.target.value });\n                }}\n                required\n                fullWidth\n                className={S.textField}\n                margin=\"normal\"\n                size=\"small\"\n              />\n            );\n          })}\n          <Button onClick={newOneData} variant=\"outlined\">\n            New Data (1)\n          </Button>\n          <Button\n            onClick={newTenData}\n            variant=\"contained\"\n            endIcon={<SendIcon />}\n          >\n            New Data (10)\n          </Button>\n          <Button type=\"submit\" variant=\"contained\" endIcon={<SendIcon />}>\n            submit (POST)\n          </Button>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default AddingBox;\n","import React from \"react\";\nimport S from \"./Header.module.scss\";\n\nconst Header = () => {\n  return (\n    <>\n      <div className={S.Header}>\n        <span>Company Database</span>\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","import { useState, useEffect } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Tooltip from \"@mui/material/Tooltip\";\n\nimport CloudDownloadIcon from \"@mui/icons-material/CloudDownload\";\nimport WarningIcon from \"@mui/icons-material/Warning\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport RestoreIcon from \"@mui/icons-material/Restore\";\nimport PublishIcon from \"@mui/icons-material/Publish\";\n\nimport * as api from \"../axiosMethod\";\nimport S from \"./MuiTable.module.scss\";\nimport usePrompt from \"../hook/Message\";\n\nconst columns = [\n  { field: \"company\", headerName: \"Company\", width: 150 },\n  { field: \"address\", headerName: \"Address\", width: 150 },\n  { field: \"contact\", headerName: \"Contact\", width: 150 },\n  { field: \"phone\", headerName: \"Phone\", width: 150 },\n];\n\nconst EditableCell = ({ rowData, colName, onChange }) => {\n  const { editMode } = rowData;\n  const value = rowData[colName];\n  return (\n    <TableCell>\n      {editMode ? (\n        <TextField\n          value={value}\n          name={colName}\n          onChange={(e) => onChange(e, rowData)}\n        ></TextField>\n      ) : (\n        <Tooltip title={value} placement=\"top\" arrow>\n          <div className={S.cell}>{value}</div>\n        </Tooltip>\n      )}\n    </TableCell>\n  );\n};\n\nconst MuiTable = ({ refresh, setRefresh }) => {\n  const [rows, setRows] = useState([]);\n  const [rowSnapshot, setRowSnapshot] = useState({});\n  const { Notification, setAlert } = usePrompt();\n\n  const getData = async (message = true, simulateError = false) => {\n    try {\n      if (simulateError) throw new Error(\"Just a fake alarm.\");\n      const { data } = await api.get();\n      // console.log(data);\n      const parseData = data.map((v) => ({\n        id: v._id, // require, @mui/x-data-grid.\n        company: v.name,\n        address: v.address,\n        contact: v.contact,\n        phone: v.phone,\n        editMode: false,\n      }));\n      // console.log(parseData);\n      setRows(parseData);\n      if (message) {\n        setAlert({\n          open: true,\n          status: \"success\",\n          message: \"Succesfully retrieved data from database.\",\n        });\n      }\n    } catch (e) {\n      console.log(e.message);\n      setAlert({\n        open: true,\n        status: \"error\",\n        message: `Failed to get data from database. (${e.message})`,\n      });\n    }\n  };\n\n  const deleteData = async (id, index) => {\n    try {\n      await api.deleteOne(id);\n      const copyRows = [...rows];\n      copyRows.splice(index, 1);\n      setRows(copyRows);\n      setAlert({\n        open: true,\n        status: \"success\",\n        message: \"Deleted one data from database.\",\n      });\n    } catch (e) {\n      console.log(e.message);\n      setAlert({\n        open: true,\n        status: \"error\",\n        message: `Failed to delete data from database. (${e.message})`,\n      });\n    }\n  };\n\n  const deleteAllData = async () => {\n    // need try-catch block\n    try {\n      await api.deleteAll();\n      setAlert({\n        open: true,\n        status: \"success\",\n        message: \"Succesfully deleted all data from database\",\n      });\n      getData(false);\n    } catch (e) {\n      console.log(e.message);\n      setAlert({\n        open: true,\n        status: \"error\",\n        message: `Failed to delete all data from database. (${e.message})`,\n      });\n    }\n  };\n\n  const toggleEditMode = (id, state) => {\n    setRows((prevRows) =>\n      prevRows.map((row) => (row.id === id ? { ...row, editMode: state } : row))\n    );\n  };\n\n  const openEditor = (rowData) => {\n    // Make snapshot of current data (first open editor)\n    const { id } = rowData;\n    setRowSnapshot((prevShot) => ({ ...prevShot, [id]: rowData }));\n    toggleEditMode(id, true);\n  };\n\n  const closeEditor = async (rowData, publish) => {\n    const { id } = rowData;\n    if (publish) {\n      console.log(\"save\");\n      try {\n        await api.put({\n          id: rowData.id,\n          name: rowData.company,\n          address: rowData.address,\n          contact: rowData.contact,\n          phone: rowData.phone,\n        });\n        setAlert({\n          open: true,\n          status: \"success\",\n          message: \"Successfully updated data !\",\n        });\n      } catch (e) {\n        console.log(e.message);\n        setAlert({\n          open: true,\n          status: \"error\",\n          message: `Failed to update data. (${e.message})`,\n        });\n      }\n    } else {\n      console.log(\"discard\");\n      setRows((prevRows) =>\n        prevRows.map((row) => (row.id === id ? { ...rowSnapshot[id] } : row))\n      );\n    }\n    toggleEditMode(id, false);\n  };\n\n  const handleCellChange = (e, rowData) => {\n    const { id } = rowData;\n    const newValue = e.target.value;\n    const colName = e.target.name;\n    const newRowData = rows.map((row) =>\n      row.id === id ? { ...row, [colName]: newValue } : row\n    );\n    setRows(newRowData);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    getData(false);\n  }, [refresh]);\n\n  return (\n    <>\n      <Notification />\n      <div className={S.buttons}>\n        <Button\n          onClick={() => getData()}\n          variant=\"contained\"\n          endIcon={<CloudDownloadIcon />}\n        >\n          Refresh (GET)\n        </Button>\n        <Button onClick={() => setRows([])} variant=\"outlined\">\n          Clear Table (offline)\n        </Button>\n        <Button\n          onClick={() => deleteAllData()}\n          variant=\"outlined\"\n          color=\"error\"\n        >\n          Remove All Data (DELETE)\n        </Button>\n        <Button\n          onClick={() => getData(true, true)}\n          variant=\"outlined\"\n          color=\"error\"\n          endIcon={<WarningIcon />}\n        >\n          Make An Error (GET)\n        </Button>\n      </div>\n\n      <TableContainer component={Paper}>\n        <Table size=\"small\" aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              {/* edit button column */}\n              <TableCell></TableCell>\n              {/* data columns */}\n              {columns.map((col) => (\n                <TableCell key={col.field}>{col.headerName}</TableCell>\n              ))}\n              {/* delete button column */}\n              <TableCell></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, rowIdx) => (\n              <TableRow\n                key={row.id}\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n              >\n                {row.editMode ? (\n                  <>\n                    <TableCell>\n                      <Button\n                        endIcon={<PublishIcon />}\n                        onClick={() => closeEditor(row, true)}\n                      />\n                      <Button\n                        endIcon={<RestoreIcon />}\n                        onClick={() => closeEditor(row, false)}\n                      />\n                    </TableCell>\n                  </>\n                ) : (\n                  <TableCell>\n                    <Button\n                      endIcon={<EditIcon />}\n                      onClick={() => openEditor(row)}\n                    />\n                  </TableCell>\n                )}\n\n                {columns.map((col) => (\n                  <EditableCell\n                    key={col.field}\n                    {...{\n                      rowData: row,\n                      colName: col.field,\n                      onChange: handleCellChange,\n                    }}\n                  />\n                ))}\n                <TableCell>\n                  <Button\n                    color=\"error\"\n                    onClick={() => deleteData(row.id, rowIdx)}\n                  >\n                    Delete\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default MuiTable;\n","import { useState } from \"react\";\nimport AddingBox from \"./components/AddingBox\";\nimport Header from \"./components/Header\";\nimport Divider from \"@mui/material/Divider\";\nimport MuiTable from \"./components/MuiTable\";\n\nconst App = () => {\n  // Trigger POST -> then GET newest data\n  const [refresh, setRefresh] = useState(true);\n  return (\n    <>\n      <Header />\n      <div style={{ margin: \"1rem\" }}>\n        <AddingBox setRefresh={setRefresh} />\n        <Divider variant=\"middle\" />\n        <MuiTable refresh={refresh} setRefresh={setRefresh} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n\n// POST: upload multiple entries, if one entries have error property and value. Raise Warning. Status Code 207?\n\n// delete (method2: append id in URL, url-encodeded)\n\n// performance optimize:\n// virtualize table & pagination\n\n// input validatoin\n// between server <-> db, using mongoose\n\n// security:\n// https://\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport CssBaseline from \"@mui/material/CssBaseline\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"AddingBox_box__2zVqo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"MuiTable_cell__3zacg\",\"buttons\":\"MuiTable_buttons__yc1Np\"};"],"sourceRoot":""}